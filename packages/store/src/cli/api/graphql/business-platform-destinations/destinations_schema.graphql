enum AccountStatus {
  """
  Account is active on the destination
  """
  ACTIVE

  """
  Account is pending on the destination
  """
  PENDING

  """
  Account is suspended on the destination
  """
  SUSPENDED
}

type Category {
  """
  Destinations in this category.
  """
  destinations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DestinationConnection!

  """
  The category name.
  """
  name: String!
}

enum CategoryHandle {
  """
  Administration category such as: Apps, Billing, Staff, ...
  """
  ADMINISTRATION

  """
  Sections category. Other sections in an organization.
  """
  SECTIONS

  """
  Stores category such as a Shopify store.
  """
  STORES

  """
  Tools category such as: Flow, Customer support, ...
  """
  TOOLS
}

type Destination {
  """
  Account's status on the destination.
  """
  accountStatus: AccountStatus

  """
  Destination handle
  """
  handle: String

  """
  Destination Icon.
  """
  icon: Icon

  """
  Destination global identifier.
  """
  id: DestinationID!

  """
  Shops destination is an app development store.
  """
  isAppDevelopment: Boolean

  """
  Destination is able to be deactivated by the user.
  """
  isDeactivatable: Boolean

  """
  Destination last access timestamp.
  """
  lastAccess: ISO8601DateTime

  """
  Destination name.
  """
  name: String!

  """
  Destination public identifier.
  """
  publicId: DestinationPublicID!

  """
  Shops destination short name.
  """
  shortName: String

  """
  Destination status.
  """
  status: DestinationStatus!

  """
  Web destination address.
  """
  webUrl: String!
}

"""
The connection type for Destination.
"""
type DestinationConnection {
  """
  A list of edges.
  """
  edges: [DestinationEdge!]!

  """
  A list of nodes.
  """
  nodes: [Destination!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DestinationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Destination!
}

scalar DestinationID

scalar DestinationPublicID

enum DestinationStatus {
  """
  Destination is accessible.
  """
  ACTIVE

  """
  Destination is not accessible.
  """
  INACTIVE
}

scalar GlobalID

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Icon {
  """
  Icon text.
  """
  altText: String

  """
  Icon asset name.
  """
  asset: String

  """
  Icon url.
  """
  url: String
}

type Mutation {
  """
  Updates the timestamp of most recently accessed store
  """
  updateStoreAccessTimestamp(updateDestinationAccessTimeInput: UpdateDestinationAccessTimeInput!): Boolean!
}

interface Node {
  """
  The ID for an object.
  """
  id: GlobalID!
  queryComplexity: Int!
  queryDepth: Int!
}

type Organization implements Node {
  """
  Whether or not the user can unlock new plus tools.
  """
  canUnlockPlusTools: Boolean!

  """
  Destination categories.
  """
  categories(
    """
    Destination category set.
    """
    handles: [CategoryHandle!] = [STORES, TOOLS, ADMINISTRATION, SECTIONS]
  ): [Category!]

  """
  The ID for an object.
  """
  id: GlobalID!

  """
  Organization name.
  """
  name: String!
  queryComplexity: Int!
  queryDepth: Int!

  """
  Returns number of shops in the organization.
  """
  shopCount: Int

  """
  Organization status.
  """
  status: OrganizationStatus!

  """
  Denotes if this is a test Organization
  """
  testOrganization: Boolean!

  """
  Organization address.
  """
  url: String!
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge!]!

  """
  A list of nodes.
  """
  nodes: [Organization!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization!
}

"""
The ID for a Organization.
"""
scalar OrganizationID

enum OrganizationStatus {
  """
  Organization is active.
  """
  ACTIVE

  """
  Organization is locked.
  """
  LOCKED
}

type OrphanDestination {
  """
  Destination categories.
  """
  categories(
    """
    Destination category set.
    """
    handles: [CategoryHandle!] = [STORES]
  ): [Category!]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  Returns the current user account.
  """
  currentUserAccount(
    """
    The identity UUID of the account.
    """
    uuid: ID
  ): UserAccount

  """
  Returns a specific account by identity uuid.
  """
  loadTesting(
    """
    The identity UUID of the account.
    """
    uuid: ID!
  ): UserAccount

  """
  Returns a specific user account by identity uuid.
  """
  userAccount(
    """
    The identity UUID of the account.
    """
    uuid: ID!
  ): UserAccount
}

enum RestrictedDestinations {
  DEVELOPER_DASHBOARD
}

input UpdateDestinationAccessTimeInput {
  """
  Destination public identifier.
  """
  destinationPublicId: DestinationPublicID!
}

type UserAccount {
  """
  User account's email address.
  """
  email: String!

  """
  The last destination the user accessed.
  """
  lastAccessedDestination: Destination

  """
  Specific group associated with the account.
  """
  organization(
    """
    The remote ID of the organization to look up.
    """
    id: OrganizationID!
  ): Organization

  """
  Group associated with the destination.
  """
  organizationForDestination(
    """
    The public ID of the destination to look up the organization for.
    """
    destinationPublicId: DestinationPublicID!
  ): Organization

  """
  Organizations associated with an account.
  """
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    hasAccessToDestination: RestrictedDestinations

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection!

  """
  Organizations associated with an account for which the user has store create permission.
  """
  organizationsForStoreCreationInSignup(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrganizationConnection!

  """
  Destinations that do not belong to any organization.
  """
  orphanDestinations: OrphanDestination!

  """
  User account's identity UUID.
  """
  uuid: ID!
}
