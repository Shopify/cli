import {buildBaseStorefrontUrl} from './storefront-renderer.js'
import {getStorefrontSessionCookies} from './storefront-session.js'
import {DevServerSession} from './types.js'
import {outputDebug} from '@shopify/cli-kit/node/output'
import {AdminSession, ensureAuthenticatedStorefront, ensureAuthenticatedThemes} from '@shopify/cli-kit/node/session'

// 30 minutes in miliseconds.
const SESSION_TIMEOUT_IN_MS = 30 * 60 * 1000

/**
 * Initialize the session object, which is automatically refreshed
 * every 30 minutes.
 *
 * @param themeId            - The theme being rendered in this session.
 * @param adminSession       - Admin session with the initial access token and store.
 * @param adminPassword      - Custom app password or password generated by the Theme Access app.
 * @param storefrontPassword - Storefront password set in password-protected stores.
 *
 * @returns Details about the app configuration state.
 */
export async function initializeDevServerSession(
  themeId: string,
  adminSession: AdminSession,
  adminPassword?: string,
  storefrontPassword?: string,
) {
  const session = await fetchDevServerSession(themeId, adminSession, adminPassword, storefrontPassword)

  setInterval(() => {
    fetchDevServerSession(themeId, adminSession, adminPassword, storefrontPassword)
      .then((newSession) => {
        outputDebug('Refreshing theme session...')
        Object.assign(session, newSession)
      })
      .catch(() => {
        outputDebug('Session could not be refreshed.')
      })
  }, SESSION_TIMEOUT_IN_MS)

  return session
}

async function fetchDevServerSession(
  themeId: string,
  adminSession: AdminSession,
  adminPassword?: string,
  storefrontPassword?: string,
): Promise<DevServerSession> {
  const baseUrl = buildBaseStorefrontUrl(adminSession)

  const session = await ensureAuthenticatedThemes(adminSession.storeFqdn, adminPassword, [])
  const storefrontToken = await ensureAuthenticatedStorefront([], adminPassword)
  const sessionCookies = await getStorefrontSessionCookies(baseUrl, themeId, storefrontPassword, {})

  return {
    ...session,
    sessionCookies,
    storefrontToken,
  }
}
