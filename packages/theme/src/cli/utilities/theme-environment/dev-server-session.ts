import {buildBaseStorefrontUrl} from './storefront-renderer.js'
import {getStorefrontSessionCookies, ShopifyEssentialError} from './storefront-session.js'
import {DevServerSession} from './types.js'
import {fetchThemeAssets} from '@shopify/cli-kit/node/themes/api'
import {AbortError} from '@shopify/cli-kit/node/error'
import {outputDebug, outputContent, outputToken} from '@shopify/cli-kit/node/output'
import {AdminSession, ensureAuthenticatedStorefront, ensureAuthenticatedThemes} from '@shopify/cli-kit/node/session'

// 30 minutes in miliseconds.
const SESSION_TIMEOUT_IN_MS = 30 * 60 * 1000
const REQUIRED_THEME_FILES = ['layout/theme.liquid', 'config/settings_schema.json']

/**
 * Initialize the session object, which is automatically refreshed
 * every 30 minutes.
 *
 * @param themeId            - The theme being rendered in this session.
 * @param adminSession       - Admin session with the initial access token and store.
 * @param adminPassword      - Custom app password or password generated by the Theme Access app.
 * @param storefrontPassword - Storefront password set in password-protected stores.
 *
 * @returns Details about the app configuration state.
 */
export async function initializeDevServerSession(
  themeId: string,
  adminSession: AdminSession,
  adminPassword?: string,
  storefrontPassword?: string,
) {
  const session = await fetchDevServerSession(themeId, adminSession, adminPassword, storefrontPassword)

  session.refresh = async () => {
    outputDebug('Refreshing theme session...')
    const newSession = await fetchDevServerSession(themeId, adminSession, adminPassword, storefrontPassword)
    Object.assign(session, newSession)
  }

  setInterval(() => {
    if (!session.refresh) return

    session
      .refresh()
      .then(() => outputDebug('Refreshed theme session via auto-refresher...'))
      .catch(() => outputDebug('Session could not be refreshed.'))
  }, SESSION_TIMEOUT_IN_MS)

  return session
}

async function fetchDevServerSession(
  themeId: string,
  adminSession: AdminSession,
  adminPassword?: string,
  storefrontPassword?: string,
): Promise<DevServerSession> {
  const baseUrl = buildBaseStorefrontUrl(adminSession)

  const session = await ensureAuthenticatedThemes(adminSession.storeFqdn, adminPassword, [])
  const storefrontToken = await ensureAuthenticatedStorefront([], adminPassword)
  const sessionCookies = await getStorefrontSessionCookiesWithVerification(
    baseUrl,
    themeId,
    adminSession,
    storefrontToken,
    storefrontPassword,
  )

  return {
    ...session,
    sessionCookies,
    storefrontToken,
  }
}

export async function getStorefrontSessionCookiesWithVerification(
  storeUrl: string,
  themeId: string,
  adminSession: AdminSession,
  storefrontToken: string,
  storefrontPassword?: string,
): Promise<{[key: string]: string}> {
  try {
    return await getStorefrontSessionCookies(storeUrl, themeId, storefrontPassword, {
      'X-Shopify-Shop': adminSession.storeFqdn,
      'X-Shopify-Access-Token': adminSession.token,
      Authorization: `Bearer ${storefrontToken}`,
    })
  } catch (error) {
    if (error instanceof ShopifyEssentialError) {
      await abortOnMissingRequiredFile(themeId, adminSession)
    }

    throw error
  }
}

export async function abortOnMissingRequiredFile(themeId: string, adminSession: AdminSession) {
  outputDebug(`Verifying if theme with id ${themeId} has required files...`)
  const requiredAssets = await fetchThemeAssets(Number(themeId), REQUIRED_THEME_FILES, adminSession)

  if (requiredAssets.length !== REQUIRED_THEME_FILES.length) {
    throw new AbortError(
      outputContent`Theme ${outputToken.cyan(themeId)} is missing required files. Run ${outputToken.cyan(
        `shopify theme delete -t ${themeId}`,
      )} to delete it, then try your command again.`.value,
    )
  }

  outputDebug(`Theme with id ${themeId} has required files.`)
}
