import {takeRandomFromArray} from './array.js'
import {unstyled} from '../../public/node/output.js'
import {Token, TokenItem} from '../../private/node/ui/components/TokenizedText.js'

const SAFE_RANDOM_BUSINESS_ADJECTIVES = [
  'commercial',
  'profitable',
  'amortizable',
  'branded',
  'integrated',
  'synergistic',
  'consolidated',
  'diversified',
  'lean',
  'niche',
  'premium',
  'luxury',
  'scalable',
  'optimized',
  'empowered',
  'international',
  'beneficial',
  'fruitful',
  'extensive',
  'lucrative',
  'modern',
]

const SAFE_RANDOM_CREATIVE_ADJECTIVES = [
  'bright',
  'impactful',
  'stylish',
  'colorful',
  'modern',
  'minimal',
  'trendy',
  'creative',
  'artistic',
  'spectacular',
  'glamorous',
  'luxury',
  'retro',
  'nostalgic',
  'comfy',
  'polished',
  'fabulous',
  'balanced',
  'monochrome',
  'glitched',
]

const SAFE_RANDOM_BUSINESS_NOUNS = [
  'account',
  'consumer',
  'customer',
  'enterprise',
  'business',
  'venture',
  'marketplace',
  'revenue',
  'vertical',
  'portfolio',
  'negotiation',
  'shipping',
  'demand',
  'supply',
  'growth',
  'merchant',
  'investment',
  'shareholder',
  'conversion',
  'capital',
  'projection',
  'upside',
  'trade',
  'deal',
  'merchandise',
  'transaction',
  'sale',
]

const SAFE_RANDOM_CREATIVE_NOUNS = [
  'vibe',
  'style',
  'moment',
  'mood',
  'flavor',
  'look',
  'appearance',
  'perspective',
  'aspect',
  'ambience',
  'quality',
  'backdrop',
  'focus',
  'tone',
]

export type RandomNameFamily = 'business' | 'creative'

/**
 * Generates a random name by combining an adjective and noun.
 *
 * @param family - Theme to use for the random name (business or creative).
 * @returns A random name generated by combining an adjective and noun.
 */
export function getRandomName(family: RandomNameFamily = 'business'): string {
  const mapping = {
    business: {
      adjectives: SAFE_RANDOM_BUSINESS_ADJECTIVES,
      nouns: SAFE_RANDOM_BUSINESS_NOUNS,
    },
    creative: {
      adjectives: SAFE_RANDOM_CREATIVE_ADJECTIVES,
      nouns: SAFE_RANDOM_CREATIVE_NOUNS,
    },
  }
  return `${takeRandomFromArray(mapping[family].adjectives)}-${takeRandomFromArray(mapping[family].nouns)}`
}

/**
 * Given a string, it returns it with the first letter capitalized.
 *
 * @param str - String to capitalize.
 * @returns String with the first letter capitalized.
 */
export function capitalize(str: string): string {
  return str.substring(0, 1).toUpperCase() + str.substring(1)
}

/**
 * Given a list of items, it returns a pluralized string based on the amount of items.
 *
 * @param items - List of items.
 * @param plural - Supplier used when the list of items has more than one item.
 * @param singular - Supplier used when the list of items has a single item.
 * @param none - Supplier used when the list has no items.
 * @returns The {@link TokenItem} supplied by the {@link plural}, {@link singular}, or {@link none} functions.
 */
export function pluralize<
  T,
  TToken extends Token = Token,
  TPluralToken extends TToken = TToken,
  TSingularToken extends TToken = TToken,
  TNoneToken extends TToken = TToken,
>(
  items: T[],
  plural: (items: T[]) => TokenItem<TPluralToken>,
  singular: (item: T) => TokenItem<TSingularToken>,
  none?: () => TokenItem<TNoneToken>,
): TokenItem<TPluralToken | TSingularToken | TNoneToken> | string {
  if (items.length === 1) {
    return singular(items[0]!)
  }

  if (items.length > 1) {
    return plural(items)
  }

  if (none) {
    return none()
  }

  return ''
}

/**
 * Try to convert a string to an int, falling back to undefined if unable to.
 *
 * @param maybeInt - String to convert to an int.
 * @returns The int if it was able to convert, otherwise undefined.
 */
export function tryParseInt(maybeInt: string | undefined): number | undefined {
  let asInt: number | undefined
  if (maybeInt !== undefined) {
    asInt = parseInt(maybeInt, 10)
    if (isNaN(asInt)) {
      asInt = undefined
    }
  }
  return asInt
}

/**
 * Transforms a matrix of strings into a single string with the columns aligned.
 *
 * @param lines - Array of rows, where each row is an array of strings (representing columns).
 * @returns A string with the columns aligned.
 */
export function linesToColumns(lines: string[][]): string {
  const widths: number[] = []
  for (let i = 0; lines[0] && i < lines[0].length; i++) {
    const columnRows = lines.map((line) => line[i]!)
    widths.push(Math.max(...columnRows.map((row) => unstyled(row).length)))
  }
  const paddedLines = lines
    .map((line) => {
      return line
        .map((col, index) => {
          return `${col}${' '.repeat(widths[index]! - unstyled(col).length)}`
        })
        .join('   ')
        .trimEnd()
    })
    .join('\n')
  return paddedLines
}

/**
 * Given a string, it transforms it to a slug (lowercase, hyphenated, no special chars, trimmed...).
 *
 * @param str - String to slugify.
 * @returns The slugified string.
 */
export function slugify(str: string): string {
  return str
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_-]+/g, '-')
    .replace(/^-+|-+$/g, '')
}

/**
 * Given a string, it returns it with the special regex characters escaped.
 * More info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping.
 *
 * @param str - String to escape.
 * @returns The escaped string.
 */
export function escapeRegExp(str: string): string {
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
}

/**
 * Transform a string to camelCase.
 */
export {camelCase as camelize} from 'change-case'

/**
 * Transform a string to param-case.
 */
export {paramCase as hyphenate} from 'change-case'

/**
 * Transform a string to snake_case.
 */
export {snakeCase as underscore} from 'change-case'

/**
 * Transform a string to CONSTANT_CASE.
 */
export {constantCase as constantize} from 'change-case'
