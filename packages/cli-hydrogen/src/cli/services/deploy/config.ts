/* eslint-disable no-console */
import {DeployConfig, ReqDeployConfig} from './types.js'
import {gitInit} from '../../prompts/git-init.js'
import {git, error, path} from '@shopify/cli-kit'

const MINIMAL_GIT_IGNORE: git.GitIgnoreTemplate = {
  system: ['.DS_Store'],
  logs: ['logs', '*.log', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*'],
  testing: ['/coverage', '*.lcov'],
  dependencies: ['/node_modules', '.npm', '.yarn-integrity', '/.pnp', '.pnp.js'],
  typescript: ['*.tsbuildinfo'],
  environment: ['.env', '.env.test', '.env.local'],
  production: ['/dist'],
}

export const validateProject = async (config: DeployConfig, whereFrom = '') => {
  console.log(`${whereFrom}waiting for ensurePresentOrAbort`)
  await git.ensurePresentOrAbort()
  try {
    console.log(`${whereFrom}waiting for ensure inside git directory`)
    await git.ensureInsideGitDirectory(config.path)
  } catch (err: unknown) {
    if ((err as error.Abort)?.message !== git.OutsideGitDirectoryError(config.path).message) throw error
    console.log(`${whereFrom}waiting for initialising git`)
    await initializeGit(config, whereFrom)
  }
}

export const initializeGit = async (config: DeployConfig, whereFrom = '') => {
  if (!config.assumeYes) {
    console.log(`${whereFrom}config not assume yes, running git init`)
    const shouldGitInit = await gitInit()
    if (!shouldGitInit) throw new error.AbortSilent()
  }

  console.log(`${whereFrom}waiting for initialise repostory`)
  await git.initializeRepository(config.path)
  git.createGitIgnore(config.path, MINIMAL_GIT_IGNORE)
  console.log(`${whereFrom}waiting for add all`)
  await git.addAll(config.path)
  console.log(`${whereFrom} waiting for commit`)
  await git.commit('Initial commit generated by Hydrogen', {directory: config.path})
}

export const fillDeployConfig = async (config: DeployConfig): Promise<ReqDeployConfig> => {
  const [latestCommit, commitRef] = await Promise.all([
    git.getLatestCommit(config.path),
    git.getHeadSymbolicRef(config.path),
  ])

  return {
    ...config,
    pathToBuild: config.pathToBuild ? path.resolve(config.pathToBuild) : '',
    commitMessage: config.commitMessage ?? latestCommit.message,
    commitAuthor: config.commitAuthor ?? latestCommit.author_name,
    commitSha: latestCommit.hash,
    timestamp: latestCommit.date,
    commitRef,
  }
}
