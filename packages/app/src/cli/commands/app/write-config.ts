import {appFlags} from '../../flags.js'
import {AppInterface} from '../../models/app/app.js'
import {loadApp} from '../../models/app/loader.js'
import Command from '../../utilities/app-command.js'
import {loadLocalExtensionsSpecifications} from '../../models/extensions/load-specifications.js'
import {globalFlags} from '@shopify/cli-kit/node/cli'
import {Flags} from '@oclif/core'
import {writeFile} from '@shopify/cli-kit/node/fs'
import {joinPath} from '@shopify/cli-kit/node/path'
import {encodeToml} from '@shopify/cli-kit/node/toml'

export default class WriteConfig extends Command {
  static summary = 'TODO    '

  static descriptionWithMarkdown = `TODO`
  static description = this.descriptionWithoutMarkdown()

  static flags = {
    ...globalFlags,
    ...appFlags,
    format: Flags.string({
      hidden: false,
      description: 'The format of the output.',
      env: 'SHOPIFY_FLAG_FORMAT',
      default: 'ts',
    }),
  }

  // TODO: what formats
  // TODO: configurable subpath
  // TODO: configurable filename
  // TODO: hygiene on the command
  // TODO: SHOW what are the template changes? / how is it adopted?

  public async run(): Promise<void> {
    const {flags} = await this.parse(WriteConfig)
    const specifications = await loadLocalExtensionsSpecifications()
    const app: AppInterface = await loadApp({
      specifications,
      directory: flags.path,
      userProvidedConfigName: flags.config,
    })
    const manifest = {
      ...app.configuration,
      modules: (await app.manifest()).modules,
    }

    let manifestContent = `// Generated by \`shopify app write-config\` on ${new Date().toISOString()} don't edit this file directly.
export const manifest = ${JSON.stringify(manifest, null, 2)} as const;`
    let filename = 'manifest.ts'
    if (flags.format === 'json') {
      filename = 'manifest.json'
      manifestContent = JSON.stringify(manifest, null, 2)
    } else if (flags.format === 'toml') {
      filename = 'manifest.toml'
      manifestContent = encodeToml(manifest)
    }

    await writeFile(joinPath(flags.path, 'app', filename), manifestContent)
  }
}
